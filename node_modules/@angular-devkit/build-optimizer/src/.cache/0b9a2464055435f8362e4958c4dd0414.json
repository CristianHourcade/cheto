{"remainingRequest":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/utils/mercadopagoError.js","dependencies":[{"path":"/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/utils/mercadopagoError.js","mtime":1528162934000},{"path":"/opt/lampp/htdocs/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var Promise = require('bluebird');\nvar preConditions = require('../precondition');\n\n// Private variables to hide them from the integrator\nvar requestManager;\nvar execOptions;\n\nvar mercadopagoError = function mercadopagoError(message, cause, status, idempotencyId, options, requestManagerInjection) {\n  this.name = 'MercadoPagoError';\n  this.message = message || 'Unknown Error';\n  this.cause = cause || 'Unknown Cause';\n  this.status = status || 500;\n  this.idempotency = idempotencyId;\n\n  execOptions = options;\n  requestManager = requestManagerInjection;\n\n  Error.captureStackTrace(this, mercadopagoError);\n};\n\n/**\n * Execute request using the requestManager and execOptions\n * @param resolve\n * @param reject\n * @param callback\n * @returns {*}\n */\nvar executeRequest = function (resolve, reject, callback) {\n  callback = preConditions.getCallback(callback);\n\n  return requestManager.generateAccessToken().then(function () {\n    return requestManager.exec(execOptions);\n  }).then(function (response) {\n    resolve(response);\n    return callback.apply(null, [null, response]);\n  }).catch(function (err) {\n    reject(err);\n    return callback.apply(null, [err, null]);\n  });\n};\n\nmercadopagoError.prototype = Object.create(Error.prototype);\nmercadopagoError.prototype.constructor = mercadopagoError;\n\nmercadopagoError.prototype.retry = function (callback) {\n  var error;\n\n  callback = preConditions.getCallback(callback);\n\n  return new Promise(function (resolve, reject) {\n    if (!execOptions && !requestManager) {\n      error = new Error('Cant retry this operation');\n      reject(error);\n      return callback.apply(null, [error, null]);\n    }\n\n    // Retry the same request\n    return executeRequest(resolve, reject, callback);\n  });\n};\n\nmodule.exports = mercadopagoError;\n",null]}