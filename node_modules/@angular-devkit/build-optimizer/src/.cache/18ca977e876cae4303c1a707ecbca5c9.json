{"remainingRequest":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/resources/ipn.js","dependencies":[{"path":"/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/resources/ipn.js","mtime":1528223590000},{"path":"/opt/lampp/htdocs/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var requestManager = require('../request-manager');\nvar preapprovalModule = require('./preapproval');\nvar merchantOrdersModule = require('./merchantOrders');\nvar MercadopagoIpnResponse = require('../utils/mercadopagoIpnResponse');\nvar Promise = require('bluebird');\nvar preConditions = require('../precondition');\n\nvar ipn = module.exports = {\n  available_topics: ['preapproval', 'authorized_payment', 'payment', 'merchant_order']\n};\n\nipn.getPayment = requestManager.describe({\n  path: '/v1/payments/:id',\n  method: 'GET'\n});\n\nipn.getAuthorizedPayment = requestManager.describe({\n  path: '/authorized_payments/:id',\n  method: 'GET'\n});\n\n/**\n * Manage the request obtain by the ipn endpoint\n * @param request\n * @param callback\n * @returns {*}\n */\nipn.manage = function (request, callback) {\n  callback = preConditions.getCallback(callback);\n\n  return new Promise(function (resolve, reject) {\n    var id = request.query.id;\n    var topic = request.query.topic;\n    var mpResponse;\n    var mpError;\n\n    if (this.available_topics.indexOf(topic) !== -1) {\n      this[topic](id, function (err, response) {\n        if (err) {\n          reject(err);\n          return callback.apply(null, [err, null]);\n        }\n\n        mpResponse = new MercadopagoIpnResponse(id, topic, response.status, response.body);\n        resolve(mpResponse);\n        return callback.apply(null, [null, mpResponse]);\n      });\n    } else {\n      mpError = new Error('Invalid Topic (' + topic + '). The topics available are: '\n        + this.available_topics.join(', '));\n      reject(mpError);\n      return callback.apply(null, [mpError, null]);\n    }\n  }.bind(this));\n};\n\nipn.payment = function (id, callback) {\n  return this.getPayment(id, callback);\n};\n\nipn.authorized_payment = function (id, callback) {\n  return this.getAuthorizedPayment(id, callback);\n};\n\nipn.preapproval = function (id, callback) {\n  return preapprovalModule.get(id, callback);\n};\n\nipn.merchant_order = function (id, callback) {\n  return merchantOrdersModule.get(id, callback);\n};\n",null]}