{"remainingRequest":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/resources/payment.js","dependencies":[{"path":"/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/resources/payment.js","mtime":1528162934000},{"path":"/opt/lampp/htdocs/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var requestManager = require('../request-manager');\nvar paymentModel = require('../models/paymentModel');\nvar collectionsModule = require('./collections');\nvar preConditions = require('../precondition');\n\nvar payment = module.exports = {\n  schema: paymentModel,\n  idempotency: true\n};\n\npayment.create = requestManager.describe({\n  path: '/v1/payments',\n  method: 'POST'\n});\n\npayment.save = payment.create;\n\npayment.update = requestManager.describe({\n  path: '/v1/payments/:id',\n  method: 'PUT'\n});\n\npayment.get = requestManager.describe({\n  path: '/v1/payments/:id',\n  method: 'GET'\n});\n\npayment.findById = payment.get;\n\npayment.search = requestManager.describe({\n  path: '/v1/payments/search',\n  method: 'GET'\n});\n\n/**\n * Search payment: Use v0 -> /collections\n */\npayment.oldSearch = collectionsModule.search;\n\n/**\n * Cancel payment: Use v0 -> /collections\n * @param id\n * @param callback\n * @returns {*}\n */\npayment.cancel = function (id, callback) {\n  var paymentId = (typeof arguments[0] === 'object') ? arguments[0].id : arguments[0];\n\n  callback = preConditions.getCallback(callback);\n\n  return collectionsModule.put({\n    id: paymentId,\n    status: 'cancelled'\n  }, callback);\n};\n\n/**\n * Refund payment: Use v0 -> /collections\n * @param id\n * @param callback\n * @returns {*}\n */\npayment.refund = function (id, callback) {\n  var paymentId = (typeof arguments[0] === 'object') ? arguments[0].id : arguments[0];\n\n  callback = preConditions.getCallback(callback);\n\n  return collectionsModule.put({\n    id: paymentId,\n    status: 'refunded'\n  }, callback);\n};\n\n/**\n * Refund partial payment: Use v0 -> /collections\n * @param refund\n * @param callback\n * @returns {Thenable.<U>|*|{anyOf}|*}\n */\npayment.refundPartial = function (refund, callback) {\n  callback = preConditions.getCallback(callback);\n\n  return collectionsModule.refunds.post(refund, callback);\n};\n",null]}