{"remainingRequest":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/mercadopago-support.js","dependencies":[{"path":"/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/mercadopago-support.js","mtime":1538790976932},{"path":"/opt/lampp/htdocs/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var package = require('../package.json');\nvar configurations = require('./configurations');\nvar requestManager = require('./request-manager');\nvar paymentModule = require('./resources/payment');\nvar collectionsModule = require('./resources/collections');\nvar preapprovalModule = require('./resources/preapproval');\nvar preferencesModule = require('./resources/preferences');\nvar preConditions = require('./precondition');\nvar ipnModule = require('./resources/ipn');\n\nmodule.exports = function () {\n  /**\n   * Show Warning for method deprecation\n   */\n  function showWarning() {\n    var method = showWarning.caller.name;\n    if (!configurations.areTestsRunnning()) {\n      console.warn('This method (' + method + ') is deprecated and its going to be removed on next versions');\n    }\n  }\n\n  /**\n   * Enabled or disabled sandbox\n   * @param enabled\n   */\n  function sandboxMode(enabled) {\n    showWarning();\n    configurations.sandbox = (enabled !== undefined) ? (enabled === true) : configurations.sandbox;\n  }\n\n  /**\n   * Get access_token using the client_id and client_secret configure\n   * @param callback\n   * @returns {string}\n   */\n  function getAccessToken() {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return requestManager.generateAccessToken(callback);\n  }\n\n  /**\n   * Execute a GET operation (Used like a rest client)\n   * @param uri\n   * @returns {Thenable<U>|*|{anyOf}}\n   */\n  function getRest(uri) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n    var options;\n\n    showWarning();\n\n    options = {\n      path: uri,\n      method: 'GET',\n      config: {\n        qs: (arguments[1] !== undefined && typeof arguments[1] !== 'function') ? arguments[1] : {}\n      }\n    };\n\n    return requestManager.generateAccessToken(function (err) {\n      // Return callback if an error ocurr getting the access_token\n      if (err) return callback.apply(null, [err, null]);\n      return false;\n    }).then(function (accessToken) {\n      options.access_token = accessToken;\n      return requestManager.exec(options, callback);\n    });\n  }\n\n  /**\n   * Execute a POST operation (Used like a rest client)\n   * @param uri\n   * @returns {Thenable<U>|*|{anyOf}}\n   */\n  function postRest(uri) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n    var options;\n\n    showWarning();\n\n    options = {\n      path: uri,\n      method: 'POST',\n      payload: (arguments[1] !== undefined && typeof arguments[1] !== 'function') ? arguments[1] : {},\n      config: {\n        qs: (arguments[2] !== undefined && typeof arguments[2] !== 'function') ? arguments[2] : {}\n      }\n    };\n\n    return requestManager.generateAccessToken(function (err) {\n      // Return callback if an error ocurr getting the access_token\n      if (err) return callback.apply(null, [err, null]);\n      return false;\n    }).then(function (accessToken) {\n      options.access_token = accessToken;\n      return requestManager.exec(options, callback);\n    });\n  }\n\n  /**\n   * Execute a PUT operation (Used like a rest client)\n   * @param uri\n   * @returns {Thenable<U>|*|{anyOf}}\n   */\n  function putRest(uri) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n    var options;\n\n    showWarning();\n\n    options = {\n      path: uri,\n      method: 'PUT',\n      payload: (arguments[1] !== undefined && typeof arguments[1] !== 'function') ? arguments[1] : {},\n      config: {\n        qs: (arguments[2] !== undefined && typeof arguments[2] !== 'function') ? arguments[2] : {}\n      }\n    };\n\n    return requestManager.generateAccessToken(function (err) {\n      // Return callback if an error ocurr getting the access_token\n      if (err) return callback.apply(null, [err, null]);\n      return false;\n    }).then(function (accessToken) {\n      options.access_token = accessToken;\n      return requestManager.exec(options, callback);\n    });\n  }\n\n  /**\n   * Execute a DELETE operation (Used like a rest client)\n   * @param uri\n   * @returns {Thenable<U>|*|{anyOf}}\n   * @private\n   */\n  function deleteRest(uri) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n    var options;\n\n    showWarning();\n\n    options = {\n      path: uri,\n      method: 'DELETE',\n      config: {\n        qs: (arguments[1] !== undefined && typeof arguments[1] !== 'function') ? arguments[1] : {}\n      }\n    };\n\n    return requestManager.generateAccessToken(function (err) {\n      // Return callback if an error ocurr getting the access_token\n      if (err) return callback.apply(null, [err, null]);\n      return false;\n    }).then(function (accessToken) {\n      options.access_token = accessToken;\n      return requestManager.exec(options, callback);\n    });\n  }\n\n  /**\n   * Create a preference using preferenceModule\n   * @param preferences\n   * @param callback\n   * @returns {preferences}\n   */\n  function createPreference(preferences) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return preferencesModule.create(preferences, callback);\n  }\n\n  /**\n   * Update a preference using the preferenceModule (Make sure that the id is on the payload)\n   * @param id\n   * @param preference\n   * @param callback\n   * @returns {*}\n   */\n  function updatePreference(id, preference) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    // Add the id to the preferece object\n    preference.id = id;\n\n    return preferencesModule.update(preference, callback);\n  }\n\n  /**\n   * Get a preference using preferenceModule\n   * @param id\n   * @param callback\n   * @returns {*}\n   */\n  function getPreference(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return preferencesModule.get(id, callback);\n  }\n\n  /**\n   * Create a preapproval payment using the preapprovalModule\n   * @param preapproval\n   * @param callback\n   * @returns {preapproval}\n   */\n  function createPreapprovalPayment(preapproval) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return preapprovalModule.create(preapproval, callback);\n  }\n\n  /**\n   * Update a preapproval payment using the preapprovalModule (Make sure that the id is on the payload)\n   * @param id\n   * @param preapproval\n   * @param callback\n   * @returns {*}\n   */\n  function updatePreapprovalPayment(id, preapproval) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    // Add the id to the preapproval object\n    preapproval.id = id;\n\n    return preapprovalModule.update(preapproval, callback);\n  }\n\n  /**\n   * Get a preapproval payment using the preapprovalModule\n   * @param id\n   * @param callback\n   * @returns {*}\n   */\n  function getPreapprovalPayment(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return preapprovalModule.get(id, callback);\n  }\n\n  /**\n   * Search for a payment using specific filters (offset and limit). Use the paymentModule\n   * @param filters\n   * @param offset\n   * @param limit\n   * @param callback\n   */\n  function searchPayment(filters, offset, limit) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    if (!isNaN(offset)) filters.offset = offset;\n    if (!isNaN(limit)) filters.limit = limit;\n\n    return paymentModule.oldSearch({\n      qs: filters\n    }, callback);\n  }\n\n  /**\n   * Get a payment using the IPN Module (Before manage method exists on IPN Module)\n   * @param id\n   * @param callback\n   * @returns {*}\n   */\n  function getPayment(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return ipnModule.getPayment(id, callback);\n  }\n\n  /**\n   * Get a authorized payment using the IPN Module (Before manage method exists on IPN Module)\n   * @param id\n   * @param callback\n   * @returns {*}\n   */\n  function getAuthorizedPayment(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return ipnModule.getAuthorizedPayment(id, callback);\n  }\n\n  /**\n   * Refund a payment (v0 implementation)\n   * @param id\n   * @param callback\n   * @returns {*}\n   */\n  function refundPayment(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return collectionsModule.put({\n      id: id,\n      status: 'refunded'\n    }, callback);\n  }\n\n  /**\n   * Cancel a payment (v0 implementation)\n   * @param id\n   * @param callback\n   * @returns {*}\n   */\n  function cancelPayment(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return collectionsModule.put({\n      id: id,\n      status: 'cancelled'\n    }, callback);\n  }\n\n  /**\n   * Canacel a preapproval payment using the preapprovalModule\n   * @param id\n   * @param callback\n   * @returns {*}\n   */\n  function cancelPreapprovalPayment(id) {\n    var callback = preConditions.getCallback(arguments[arguments.length - 1]);\n\n    showWarning();\n\n    return preapprovalModule.update({\n      id: id,\n      status: 'cancelled'\n    }, callback);\n  }\n\n  return {\n    sandboxMode: sandboxMode,\n    getAccessToken: getAccessToken,\n    get: getRest,\n    post: postRest,\n    put: putRest,\n    delete: deleteRest,\n    createPreference: createPreference,\n    updatePreference: updatePreference,\n    getPreference: getPreference,\n    createPreapprovalPayment: createPreapprovalPayment,\n    updatePreapprovalPayment: updatePreapprovalPayment,\n    getPreapprovalPayment: getPreapprovalPayment,\n    searchPayment: searchPayment,\n    getPayment: getPayment,\n    getPaymentInfo: getPayment,\n    getAuthorizedPayment: getAuthorizedPayment,\n    refundPayment: refundPayment,\n    cancelPayment: cancelPayment,\n    cancelPreapprovalPayment: cancelPreapprovalPayment,\n    version: package.version\n  };\n};\n",null]}