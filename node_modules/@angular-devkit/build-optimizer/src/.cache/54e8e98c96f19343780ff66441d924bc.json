{"remainingRequest":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/resources/connect.js","dependencies":[{"path":"/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/resources/connect.js","mtime":1528162934000},{"path":"/opt/lampp/htdocs/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var requestManager = require('../request-manager');\nvar configurations = require('../configurations');\nvar Promise = require('bluebird');\nvar preConditions = require('../precondition');\n\nvar connect = module.exports = {};\n\nconnect.get = requestManager.describe({\n  base_url: 'https://auth.mercadopago.com.ar',\n  path: '/authorization',\n  method: 'GET'\n});\n\n// Get the access_token for mercadopago connect client\nconnect.getCredentials = requestManager.getUserCredentials;\n\n/**\n * Send the authorizationCode to the redirectURI specified\n * @param clientId\n * @param redirectURI\n * @param callback\n */\nconnect.sendAuthorizationCode = function (clientId, redirectURI, callback) {\n  return this.get({\n    qs: {\n      client_id: clientId,\n      response_type: 'code',\n      platform_id: 'mp',\n      redirect_uri: redirectURI\n    }\n  }, callback);\n};\n\n/**\n * Get the access_token from MercadoPago API and set the access_token to the SDK\n * @param clientId\n * @param redirectURI\n * @param callback\n * @returns {*}\n */\nconnect.getCredentialsAndConfigure = function (clientSecret, authorizationCode, redirectURI, callback) {\n  callback = preConditions.getCallback(callback);\n\n  return requestManager.getUserCredentials(clientSecret, authorizationCode, redirectURI).then(function (response) {\n    configurations.setAccessToken(response.body.access_token)\n      .setRefreshToken(response.body.refresh_token);\n\n    callback.apply(null, [null, response]);\n    return Promise.resolve(response);\n  }).catch(function (error) {\n    callback.apply(null, [error, null]);\n    return Promise.reject(error);\n  });\n};\n",null]}