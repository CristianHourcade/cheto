{"remainingRequest":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/configurations.js","dependencies":[{"path":"/opt/lampp/htdocs/dashboard/node_modules/mercadopago/lib/configurations.js","mtime":1538790955758},{"path":"/opt/lampp/htdocs/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var sdkVersion = require('../package.json').version;\nvar Promise = require('bluebird');\nvar clientId;\nvar clientSecret;\nvar accessToken;\nvar refreshToken;\nvar schema = 'https';\nvar host = 'api.mercadopago.com';\nvar userAgent = 'MercadoPago Node.js SDK v' + sdkVersion + ' (node ' + process.version + '-' + process.arch +\n  '-' + process.platform + ')';\n\nvar configurationsModule = module.exports = {\n  sandbox: false,\n  show_promise_error: true,\n  cache_max_size: 100 * (1024 * 1024) // 100 Megabytes\n};\n\n/**\n * Set up configurations globally.\n * Do not allow override the client_id and the client_secret\n * @param {object} configurations\n */\nconfigurationsModule.configure = function (configurations) {\n  if (configurations === undefined || typeof configurations !== 'object') {\n    throw new Error('You must provide an Object with the configurations');\n  }\n\n  if (configurations.client_id === undefined && configurations.client_secret === undefined &&\n    configurations.access_token === undefined) {\n    throw new Error('You must provide a method of authentication (client_id & client_secret or access_token)');\n  }\n\n  if ((configurations.client_id !== undefined && configurations.client_secret === undefined)\n    || (configurations.client_id === undefined && configurations.client_secret !== undefined)) {\n    throw new Error('You must provide client_id and client_secret');\n  }\n\n  if (configurations.client_id !== undefined && configurations.client_secret !== undefined\n    && (clientId !== undefined || clientSecret !== undefined)) {\n    throw new Error('Cant change client_id or client_secret because is already set');\n  }\n\n  clientId = clientId || configurations.client_id;\n  clientSecret = clientSecret || configurations.client_secret;\n\n  // Set accessToken\n  accessToken = configurations.access_token || accessToken;\n  // Use if to prevent false value\n  this.sandbox = (configurations.sandbox !== undefined) ? configurations.sandbox : this.sandbox;\n  this.show_promise_error = (configurations.show_promise_error !== undefined) ?\n    configurations.show_promise_error : this.show_promise_error;\n\n  if (!this.show_promise_error) {\n    Promise.onPossiblyUnhandledRejection(function (/* error, promise */) { /* Do Nothing */ });\n  }\n};\n\n/**\n * Get clientId\n * @returns {string}\n */\nconfigurationsModule.getClientId = function () {\n  return clientId;\n};\n\n/**\n * Get clientSecret\n * @returns {string}\n */\nconfigurationsModule.getClientSecret = function () {\n  return clientSecret;\n};\n\n/**\n * Set accessToken\n * @param {string} token\n */\nconfigurationsModule.setAccessToken = function (token) {\n  accessToken = token;\n  return this;\n};\n\n/**\n * Get accessToken\n * @returns {string}\n */\nconfigurationsModule.getAccessToken = function () {\n  return accessToken;\n};\n\n/**\n * Set refreshToken\n * @param token\n */\nconfigurationsModule.setRefreshToken = function (token) {\n  refreshToken = token;\n  return this;\n};\n\n/**\n * Get refreshToken\n * @returns {*}\n */\nconfigurationsModule.getRefreshToken = function () {\n  return refreshToken;\n};\n\n/**\n * Get base URL to execute rest operations\n * @returns {string}\n */\nconfigurationsModule.getBaseUrl = function () {\n  return schema + '://' + host;\n};\n\n/**\n * Get userAgent\n * @returns {string}\n */\nconfigurationsModule.getUserAgent = function () {\n  return userAgent;\n};\n\n/**\n * Check NODE_ENV variable\n * @returns {boolean}\n */\nconfigurationsModule.areTestsRunnning = function () {\n  return process.env.NODE_ENV === 'test';\n};\n",null]}