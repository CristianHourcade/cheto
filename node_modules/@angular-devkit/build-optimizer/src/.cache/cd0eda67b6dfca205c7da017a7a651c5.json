{"remainingRequest":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/opt/lampp/htdocs/dashboard/node_modules/request-etag/lib/request-etag.js","dependencies":[{"path":"/opt/lampp/htdocs/dashboard/node_modules/request-etag/lib/request-etag.js","mtime":1453128339000},{"path":"/opt/lampp/htdocs/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/opt/lampp/htdocs/dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["'use strict';\r\n\r\nvar Cache = require('./cache');\r\nvar assign = require('lodash.assign');\r\nvar cloneDeep = require('lodash.clonedeep');\r\n\r\nfunction getHeaderValue(headers, name) {\r\n  var value;\r\n  Object.keys(headers || {}).forEach(function (key) {\r\n    if (key.toLowerCase() === name) {\r\n      value = headers[key];\r\n    }\r\n  });\r\n  return value;\r\n}\r\n\r\nfunction parseParameters(uri, options, callback) {\r\n  if (typeof options === 'object') {\r\n    return {\r\n      options: assign(options, { uri: uri }),\r\n      callback: callback\r\n    };\r\n  }\r\n  if (typeof uri === 'string') {\r\n    if (typeof callback === 'function') {\r\n      return {\r\n        options: { uri: uri },\r\n        callback: callback\r\n      };\r\n    }\r\n    return {\r\n      options: { uri: uri },\r\n      callback: options\r\n    };\r\n  }\r\n  return {\r\n    options: uri,\r\n    callback: options\r\n  };\r\n}\r\n\r\nfunction getHttpClient(cache, wrappedHttpClient) {\r\n  function httpClient(uri, options, callback) {\r\n    var parameters = parseParameters(uri, options, callback);\r\n    if (parameters.options.method && parameters.options.method.toLowerCase() !== 'get') {\r\n      return wrappedHttpClient(parameters.options, parameters.callback);\r\n    }\r\n\r\n    parameters.options.headers = parameters.options.headers || {};\r\n    if (getHeaderValue(parameters.options.headers, 'cookie')) {\r\n      return wrappedHttpClient(parameters.options, parameters.callback);\r\n    }\r\n\r\n    var cacheKey = cloneDeep(parameters.options);\r\n    var cacheHit = cache.get(cacheKey);\r\n    if (cacheHit) {\r\n      parameters.options.headers['If-None-Match'] = cacheHit.etag;\r\n    }\r\n\r\n    return wrappedHttpClient(parameters.options, function (error, response, body) {\r\n      if (!error) {\r\n        if (response.statusCode === 200) {\r\n          var etag = getHeaderValue(response.headers, 'etag');\r\n          if (etag) {\r\n            cache.set(cacheKey, { data: cloneDeep(body), etag: etag });\r\n          }\r\n        }\r\n        if (response.statusCode === 304) {\r\n          body = cloneDeep(cacheHit.data);\r\n        }\r\n      }\r\n      parameters.callback(error, response, body);\r\n    });\r\n  }\r\n\r\n  httpClient.reset = cache.reset;\r\n  return httpClient;\r\n}\r\n\r\nfunction Request(cacheConfig, baseHttpClient) {\r\n  var cache = new Cache(cacheConfig);\r\n  var wrappedHttpClient = baseHttpClient || require('request');\r\n  return getHttpClient(cache, wrappedHttpClient);\r\n}\r\n\r\nmodule.exports = Request;\r\n",null]}